抽象工厂模式：提供一个接口用来创造一系列相关或者相关依赖对象，而不需要指定他们具体的类（本设计模式中参考Customer中工厂的使用）

好处：
1.希望对具体类的实例过程改为了对对应工厂的操作，具体类不会出现在客户端代码中（这种情况下是使用了对应的工厂代替了具体类）

坏处：
1.每增加一个不同于之前类的新类（不能使用原有工厂），这种情况下需要修改的文件太多。

替代模式：
使用反射将希望生产的对象的所属类变成可变的（这种情况下，遇到原有的抽象工厂模式坏处的话，只需要新增具体的类(这是不可避免的)），而不需要对具体的类做修改。
这种抽象模式的使用（其实是简单工厂模式+反射）。
这种情况下，遇到需要新的对象的时候，只需要增加新的类就可以类，不需要新增具体的工厂(因为依赖反射而不是工厂去生产对象了)