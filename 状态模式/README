状态模式中，类的行为是根据他的状态而发生变化的。
可以理解switch/case，对状态的判断是从上而下走的，状态模式就是将每种情况抽象成了一个类，由抽象出的类，去做具体的行为。
但是我们是由很多状态的，所以可以理解成有很多子类，这时他们需要一个抽象的基类去定义这些具体的状态类要做什么。
State接口，实现了State的各个具体状态类.
觉得状态模式最适合的情况就是用来替代switch/case。



状态模式组成：
抽象状态类
具体状态类（具体状态类定义类具体的行为操作以及下个状态是什么情况）
具体对象类（通过判断这个对象类的状态执行不同的操作），具体类还应该包括状态对象，通过状态对象执行操作的入口，这样的话外部类在执行操作的时候，只需要具体对象
交互就可以，不需要知道和哪个具体状态类做的交互。


适用场景：
当一个对象的行为取决与他的状态的时候，并且必须在运行时刻根据状态改变他的行为的时候，就可以考虑适用状态模式(switch/case)



好处：
将本来应该写在一个类里的所有状态判断操作，拆分成了几个不同的类，这个时候如果需要增加状态或者删除状态，修改这些状态对其他的状态类的影响比较小，
很好的遵循了开放-封闭原则和单一职责原则。