外观模式定义了一个接口(并不一定是interface也可以class或者抽象类)，这个接口为外部与一系列子系统的通信提供了一个中间层。
可以参考我们要租房  中介就是门面  房东就是子系统
我们所有的操作都通过门面去执行，降低外部类与子系统的耦合。

适用场景
当外部类要与一系列子系统做交互的时候，可以提供一个门面去操作（外部类只与门面去操作即可，不需要关系自己使用了哪些子系统）
层次化结构中，可以考虑使用外观模式，降低层与层之间的关联(可以参考service层和model层中间建立个门面)
外部类和子系统耦合性比较高的情况下，使用门面模式可以降低耦合。


优点：
对于外观类和子系统之间的交互很好的解耦。
很好的遵从了迪米特法则
（如果两个类之间不必直接通信，那两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的方法的话，可以通过第三方来调用）

缺点：
没有很好的支持开放-封闭原则，因为如果需要增加或者删除外观类和子系统的交互的时候，需要去修改门面类或者外部类，可以通过将门面类声明为抽象类，
具体的门面类实现抽象类，如果需要新增对一系列子系统访问的话，可以通过新增一个实现了抽象门面类的具体类